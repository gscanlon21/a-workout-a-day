@using Core.Models.Exercise
@using Core.Models.Newsletter
@using Core.Dtos.User
@using Core.Dtos.Exercise
@using Core.Dtos.Newsletter
@using Core.Models.Exercise.Skills

@if (Exercises?.Any() == true)
{
    var titleColor = Theme switch
    {
        ExerciseTheme.Warmup => "palevioletred",
        ExerciseTheme.Main => "mediumpurple",
        ExerciseTheme.Cooldown => "lightskyblue",
        ExerciseTheme.Extra => "lightgreen",
        ExerciseTheme.Other => "lightsalmon",
        _ => "currentColor"
    };

    if (Title == null)
    {
        foreach (var exerciseGroup in Exercises.GroupBy(e => e, new ExerciseSectionComparer()).OrderBy(e => e.Key.Exercise.Name))
        {
            <h2 style="margin-bottom:0;margin-top:1em;color:@titleColor;font-size:revert;">@exerciseGroup.Key.Exercise.Name</h2>
            if (Verbosity.HasFlag(Verbosity.Skills) && exerciseGroup.Key.Exercise.VocalSkills > 0)
            {
                <p style="margin-block:0;"><b>Vocal Skills</b> - @(exerciseGroup.Key.Exercise.VocalSkills.GetDisplayName())</p>
                if (Verbosity.HasFlag(Verbosity.Debug) && (VocalSkills.All & ~exerciseGroup.Key.Exercise.VocalSkills) > 0)
                {
                    <div style="margin-block:.1ex;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @((VocalSkills.All & ~exerciseGroup.Key.Exercise.VocalSkills).GetDisplayName(DisplayType.ShortName))</div>
                }
            }

            if (Verbosity.HasFlag(Verbosity.Skills) && exerciseGroup.Key.Exercise.VisualSkills > 0)
            {
                <p style="margin-block:0;"><b>Visual Skills</b> - @(exerciseGroup.Key.Exercise.VisualSkills.GetDisplayName())</p>
                if (Verbosity.HasFlag(Verbosity.Debug) && (VisualSkills.All & ~exerciseGroup.Key.Exercise.VisualSkills) > 0)
                {
                    <div style="margin-block:.1ex;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @((VisualSkills.All & ~exerciseGroup.Key.Exercise.VisualSkills).GetDisplayName(DisplayType.ShortName))</div>
                }
            }

            if (Verbosity.HasFlag(Verbosity.Skills) && exerciseGroup.Key.Exercise.CervicalSkills > 0)
            {
                <p style="margin-block:0;"><b>Cervical Skills</b> - @(exerciseGroup.Key.Exercise.CervicalSkills.GetDisplayName())</p>
                if (Verbosity.HasFlag(Verbosity.Debug) && (CervicalSkills.All & ~exerciseGroup.Key.Exercise.CervicalSkills) > 0)
                {
                    <div style="margin-block:.1ex;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @((CervicalSkills.All & ~exerciseGroup.Key.Exercise.CervicalSkills).GetDisplayName(DisplayType.ShortName))</div>
                }
            }

            if (Verbosity.HasFlag(Verbosity.Skills) && exerciseGroup.Key.Exercise.ThoracicSkills > 0)
            {
                <p style="margin-block:0;"><b>Thoracic Skills</b> - @(exerciseGroup.Key.Exercise.ThoracicSkills.GetDisplayName())</p>
                if (Verbosity.HasFlag(Verbosity.Debug) && (ThoracicSkills.All & ~exerciseGroup.Key.Exercise.ThoracicSkills) > 0)
                {
                    <div style="margin-block:.1ex;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @((ThoracicSkills.All & ~exerciseGroup.Key.Exercise.ThoracicSkills).GetDisplayName(DisplayType.ShortName))</div>
                }
            }

            if (Verbosity.HasFlag(Verbosity.Skills) && exerciseGroup.Key.Exercise.LumbarSkills > 0)
            {
                <p style="margin-block:0;"><b>Lumbar Skills</b> - @(exerciseGroup.Key.Exercise.LumbarSkills.GetDisplayName())</p>
                if (Verbosity.HasFlag(Verbosity.Debug) && (LumbarSkills.All & ~exerciseGroup.Key.Exercise.LumbarSkills) > 0)
                {
                    <div style="margin-block:.1ex;font-size:x-small;color:mediumvioletred"><b>Unused</b>: @((LumbarSkills.All & ~exerciseGroup.Key.Exercise.LumbarSkills).GetDisplayName(DisplayType.ShortName))</div>
                }
            }

            if (Verbosity.HasFlag(Verbosity.All))
            {
                @if (exerciseGroup.Key.ExercisePrerequisites?.Any() == true)
                {
                    <p style="margin-block:0;"><b>Prerequisites</b> - @String.Join(", ", exerciseGroup.Key.ExercisePrerequisites.Select(e => $"{e.Name}: {e.Proficiency}"))</p>
                }

                @if (!string.IsNullOrWhiteSpace(exerciseGroup.Key.Exercise.Notes))
                {
                    <p style="margin-block:0;"><b>Notes</b> - @exerciseGroup.Key.Exercise.Notes</p>
                }
            }

            <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
                @foreach (var item in exerciseGroup)
                {
                    <CascadingValue Value="User">
                        <_Exercise Model="item" Verbosity="Verbosity" />
                    </CascadingValue>
                }
            </div>
        }
    }
    else
    {
        <h2 style="margin-bottom:0;margin-top:1em;color:@titleColor;font-size:revert;">@Title.Header</h2>
        if (Verbosity.HasFlag(Verbosity.Instructions) && Title.Description.HasValue)
        {
            <h6 style="margin-block:0;font-size:revert;">@Title.Description.Value</h6>
        }
        <div style="margin-top:.2rem;display:flex;flex-flow:row wrap;gap:1ch;line-height:normal;">
            @foreach (var item in Exercises)
            {
                <CascadingValue Value="User">
                    <_Exercise Model="item" Verbosity="Verbosity" />
                </CascadingValue>
            }
        </div>
        if (Verbosity.HasFlag(Verbosity.Instructions) && Title.Footer.HasValue)
        {
            <h6 style="margin-bottom:0;margin-top:.25em;font-weight:normal;font-size:revert;">@Title.Footer.Value</h6>
        }
    }
}

@code {
    [Parameter]
    public Titles? Title { get; init; }

    [Parameter, EditorRequired]
    public UserNewsletterDto? User { get; init; }

    [Parameter, EditorRequired]
    public ExerciseTheme Theme { get; init; }

    [Parameter, EditorRequired]
    public Verbosity Verbosity { get; init; }

    [Parameter, EditorRequired]
    public IList<ExerciseVariationDto>? Exercises { get; init; }

    public record Titles(MarkupString Header, MarkupString? Description, MarkupString? Footer)
    {
        public Titles(string header) : this(new MarkupString(header), null, null) { }
        public Titles(string header, string description) : this(new MarkupString(header), new MarkupString(description), null) { }
        public Titles(string header, string description, string footer) : this(new MarkupString(header), new MarkupString(description), new MarkupString(footer)) { }
    };

    private class ExerciseSectionComparer : IEqualityComparer<ExerciseVariationDto>
    {
        public bool Equals(ExerciseVariationDto? a, ExerciseVariationDto? b)
            => EqualityComparer<ExerciseDto>.Default.Equals(a?.Exercise, b?.Exercise);

        public int GetHashCode(ExerciseVariationDto e) => e.Exercise.GetHashCode();
    }
}