@model NextWorkoutViewModel
@using Core.Models.Exercise
@using Core.Models.User
@using Core.Dtos.Newsletter

@{
    // Match up the next 7 days with their upcoming newsletter rotation
    var dayRotations = EnumExtensions.GetSingleValues<Days>()
        // Order days by the current day and then their weekday order.
        .OrderByDescending(day => day == Model.Today && Model.NextWorkoutSendsToday)
        .ThenBy(day => ((day - Model.Today) > 0) ? (day - Model.Today) : int.MaxValue)
        .ThenBy(day => day - Model.Today)
        .Select(day =>
        {
            if (Model.User.SendDays.HasFlag(day))
            {
                // 7 days are longer than the splits
                if (!Model.CurrentAndUpcomingRotations.MoveNext())
                {
                    Model.CurrentAndUpcomingRotations.Reset();
                    Model.CurrentAndUpcomingRotations.MoveNext();
                }

                return (day: day, rotation: Model.CurrentAndUpcomingRotations.Current, frequency: Model.User.Frequency);
            }
            else if (Model.User.IncludeMobilityWorkouts)
            {
                return (day: day, rotation: Model.MobilityRotation, frequency: Frequency.Mobility);
            }

            return (day: day, rotation: (WorkoutRotationDto?)null, frequency: (Frequency?)null);
        }).ToList();

    void RenderListItem(Days day, WorkoutRotationDto? rotation, Frequency? frequency)
    {
        <div class="row gx-3 gy-1">
            <div class="col"><b>@(frequency == Frequency.Mobility ? "Mobility" : (rotation?.MuscleGroupsDisplayName ?? "Rest"))</b></div>
            <div class="col-auto"><small class="badge bg-dark rounded-pill">@day.GetSingleDisplayName(DisplayType.Name)</small></div>
        </div>
        @if (rotation != null)
        {
            <div>
                @if (frequency == Frequency.Mobility)
                {
                    <small>@rotation.MuscleGroupsDisplayName</small>
                }
                else
                {
                    <small>@rotation.MovementPatterns.GetDisplayName(DisplayType.ShortName)</small>
                }
            </div>
        }
    }
}

@* Empty div to prevent nested counters with other components that nest their numbered lists under a <details> element. *@
<div>
    <div class="row align-items-center">
        <div class="col">
            <h5 class="mb-0">Upcoming Workouts</h5>
            <h6 class="mb-1 font-weight--normal">
                @if (Model.TimeUntilNextSend.HasValue)
                {
                    var totalHoursAsInt = Convert.ToInt64(Model.TimeUntilNextSend.Value.TotalHours);
                    if (totalHoursAsInt <= 0)
                    {
                        <span>Your next workout is sending</span>
                    }
                    else
                    {
                        <span>Your next workout will send in @totalHoursAsInt hours</span>
                    }
                }
            </h6>
        </div>
        <div class="col-auto">
            <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.AdvanceSplit)" asp-route-email="@Model.User.Email" asp-route-token="@Model.Token" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <button class="btn btn-icon" type="submit" title="Advance your workout split">
                    <img src="/images/user/advance.svg">
                </button>
            </form>
        </div>
    </div>
    <div class="list-group mb-3">
        @for (var i = 0; i < dayRotations.Count; i++)
        {
            var (day, rotation, frequency) = dayRotations[i];
            if (i == 0 && Model.NextWorkoutSendsToday && day == Model.Today)
            {
                <a href="@Url.ActionLink(nameof(NewsletterController.Newsletter), NewsletterController.Name, new { Model.User.Email, Model.Token, Client = Client.Web })" class="list-group-item list-group-item-info list-group-item-action active hover allow-demo">
                    @{ RenderListItem(day, rotation, frequency); }
                </a>
            }
            else
            {
                <div class="list-group-item list-group-item-primary @(i == 0 ? "active" : "")">
                    @{ RenderListItem(day, rotation, frequency); }
                </div>
            }    
        }
    </div>
</div>
