@model UserEditViewModel
@using System.Numerics
@using Core.Models.Exercise
@using Core.Models.User
@using Data.Models.Newsletter
@using Core.Consts
@using Data.Entities.User
@using Data.Entities.Equipment
@using Web.Code.Extensions

<div id="edit" class="row gy-2">
    <div class="col-lg-6">
        <form asp-controller="@UserController.Name" asp-action="@nameof(UserController.Edit)" method="post"
              class="alert alert-light shadow">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Token" />
            <input type="hidden" asp-for="Email" />

            @if (!Model.User.IsDemoUser) 
            {
                <div class="form-group mb-3">
                    <label for="disabled-email" class="control-label">@Html.DisplayNameFor(_ => Model.Email)</label>
                    <input id="disabled-email" value="@Model.Email" class="form-control" disabled="disabled" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
            }

            @if (Model.IsNewToFitness || Model.User.IsDemoUser)
            {
                if (Model.User.IsDemoUser)
                {
                    <div class="alert alert-info callout">
                        Workouts are simplified for users who are new to fitness to build consistency and reduce injury risk.
                    </div>
                }
                <div class="form-group form-check mb-3">
                    <label asp-for="IsNewToFitness" class="control-label">@Html.DisplayNameFor(_ => Model.IsNewToFitness)</label>
                    <input class="form-check-input" asp-for="IsNewToFitness" aria-describedby="is-new-help" />
                    <span asp-validation-for="IsNewToFitness" class="text-danger"></span>
                    <details id="is-new-help" class="form-text">
                        <summary>@Html.DisplayDescriptionFor(_ => Model.IsNewToFitness)</summary>

                        <div class="mt-1">
                            <span>Some preferences are hidden while this is active. This cannot be reselected after being switched off.</span>
                        </div>
                    </details>
                </div>
            }
            else
            {
                <input type="hidden" asp-for="IsNewToFitness" />
            }

            <div class="form-group mb-3">
                <label asp-for="Frequency" class="control-label">@Html.DisplayNameFor(_ => Model.Frequency)</label>
                <select asp-for="Frequency" class="form-control" aria-describedby="frequency-help"
                        asp-items="@EnumExtensions.GetValuesExcluding(Frequency.None, Frequency.Mobility, Model.User.IsNewToFitness ? Frequency.Custom : Frequency.None).AsSelectListItems().OrderBy(f => f.Text)">
                </select>
                <span asp-validation-for="Frequency" class="text-danger"></span>
                <details id="frequency-help" class="form-text">
                    <summary>What's this?</summary>

                    <div class="mt-1">
                        <div>
                            <b>@Frequency.FullBody2Day.GetSingleDisplayName()</b>
                            <div class="ps-3">@Html.Raw(String.Join("<br/>", new WorkoutSplit(Frequency.FullBody2Day).Select(r => r.ToUserString())))</div>
                        </div>
                        <div>
                            <b>@Frequency.PushPullLeg3Day.GetSingleDisplayName()</b>
                            <div class="ps-3">@Html.Raw(String.Join("<br/>", new WorkoutSplit(Frequency.PushPullLeg3Day).Select(r => r.ToUserString())))</div>
                        </div>
                        <div>
                            <b>@Frequency.UpperLowerFullBodySplit3Day.GetSingleDisplayName()</b>
                            <div class="ps-3">@Html.Raw(String.Join("<br/>", new WorkoutSplit(Frequency.UpperLowerFullBodySplit3Day).Select(r => r.ToUserString())))</div>
                        </div>
                        <div>
                            <b>@Frequency.PushPullLegsFullBodySplit4Day.GetSingleDisplayName()</b>
                            <div class="ps-3">@Html.Raw(String.Join("<br/>", new WorkoutSplit(Frequency.PushPullLegsFullBodySplit4Day).Select(r => r.ToUserString())))</div>
                        </div>
                        <div>
                            <b>@Frequency.UpperLowerBodySplit4Day.GetSingleDisplayName()</b>
                            <div class="ps-3">@Html.Raw(String.Join("<br/>", new WorkoutSplit(Frequency.UpperLowerBodySplit4Day).Select(r => r.ToUserString())))</div>
                        </div>
                        <div>
                            <b>@Frequency.PushPullLegsUpperLowerSplit5Day.GetSingleDisplayName()</b>
                            <div class="ps-3">@Html.Raw(String.Join("<br/>", new WorkoutSplit(Frequency.PushPullLegsUpperLowerSplit5Day).Select(r => r.ToUserString())))</div>
                        </div>

                        <div class="mt-2">@Html.DisplayDescriptionFor(_ => Model.Frequency)</div>
                    </div>
                </details>
            </div>
            @if (Model.Frequency == Frequency.Custom)
            {
                <details class="mb-3" @(Model.WasUpdated == false ? "open='open'" : "")>
                    <summary><b>Edit Workout Split</b></summary>

                    <div class="mt-1 ps-3">
                        @for (int id = 0; id < Model.UserFrequencies.Count; id++)
                        {
                            var userFrequency = Model.UserFrequencies[id];
                            <div id="custom-frequency-@userFrequency.Day" class="custom-frequency @(userFrequency.Hide ? "d-none" : "")" data-day="@userFrequency.Day">
                                <div class="row">
                                    <span class="col-auto font-weight--semibold">Day @userFrequency.Day</span>
                                </div>
                                <div class="row">
                                    <input id="hide-input-@userFrequency.Day" type="hidden" asp-for="UserFrequencies[id].Hide" />
                                    <input type="hidden" asp-for="UserFrequencies[id].Day" />
                                    <span asp-validation-for="UserFrequencies[id].Day" class="text-danger"></span>

                                    <div class="form-group mb-3 col" style="min-width:200px;">
                                        <label asp-for="UserFrequencies[id].MuscleGroups" class="control-label">Muscle Groups</label>
                                        <select asp-for="UserFrequencies[id].MuscleGroups" class="form-control overflow-auto" size="5"
                                                asp-items='@(UserMuscleStrength.MuscleTargets.Keys.AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))'>
                                        </select>
                                        <span asp-validation-for="UserFrequencies[id].MuscleGroups" class="text-danger"></span>
                                        <div class="form-text">Choose muscle groups to target in your workout.</div>
                                    </div>
                                    <div class="form-group mb-3 col" style="min-width:200px;">
                                        <label asp-for="UserFrequencies[id].MovementPatternsBinder" class="control-label">Movement Patterns</label>
                                        <select asp-for="UserFrequencies[id].MovementPatternsBinder" class="form-control overflow-auto" size="5"
                                                asp-items='@(EnumExtensions.GetValuesExcluding(MovementPattern.None, MovementPattern.All, MovementPattern.Push, MovementPattern.Pull).AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))'>
                                        </select>
                                        <span asp-validation-for="UserFrequencies[id].MovementPatternsBinder" class="text-danger"></span>
                                        <div class="form-text">Choose movement patterns to target in your workout. You will see one exercise for each movement pattern selected.</div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="btn-group">
                            <button id="custom-freq-add-button" type="button" class="btn btn-outline-primary">Add</button>
                            <button id="custom-freq-remove-button" type="button" class="btn btn-outline-secondary">Remove</button>
                        </div>
                    </div>

                    <script defer="defer">
                        document.getElementById('custom-freq-add-button').addEventListener('click', (e) => {
                            const freqs = Array.from(document.getElementsByClassName('custom-frequency'));
                            for (const freq of freqs) {
                                if (freq.classList.contains('d-none')) {
                                    // Unhide the freq
                                    freq.classList.remove('d-none');
                                    document.getElementById('hide-input-' + freq.dataset.day).value = 'False';
                                    break;
                                }
                            }

                            // Always show the remove button after adding a freq
                            document.getElementById('custom-freq-remove-button').classList.remove('d-none');

                            // Hide the add button if we have already shown all freqs
                            if (freqs.every(f => !f.classList.contains('d-none'))) {
                                e.currentTarget.classList.add('d-none');
                            }
                        });

                        document.getElementById('custom-freq-remove-button').addEventListener('click', (e) => {
                            const freqs = Array.from(document.getElementsByClassName('custom-frequency'));
                            for (const freq of freqs.reverse()) {
                                if (!freq.classList.contains('d-none')) {
                                    // Hide the freq
                                    freq.classList.add('d-none');
                                    document.getElementById('hide-input-' + freq.dataset.day).value = 'True';
                                    break;
                                }
                            }

                            // Always show the add button after removing a freq
                            document.getElementById('custom-freq-add-button').classList.remove('d-none');

                            // Hide the remove button when there is one remaining freq
                            if (freqs.filter(f => !f.classList.contains('d-none')).length === 1) {
                                e.currentTarget.classList.add('d-none');
                            }
                        });
                    </script>
                </details>
            }

            @if (Model.IsNewToFitness)
            {
                <input type="hidden" asp-for="Intensity" />
            }
            else
            {
                <div class="form-group mb-3">
                    <label asp-for="Intensity" class="control-label">@Html.DisplayNameFor(_ => Model.Intensity)</label>
                    <select asp-for="Intensity" class="form-control" aria-describedby="strength-help"
                            asp-items="@(EnumExtensions.GetDisplayValues<Intensity>().AsSelectListItems())">
                    </select>
                    <span asp-validation-for="Intensity" class="text-danger"></span>
                    <details id="strength-help" class="form-text">
                        <summary>What's this?</summary>

                        <div class="mt-1">
                            <div><b>@Intensity.None.GetSingleDisplayName()</b> - @Intensity.None.GetSingleDisplayName(DisplayType.Description)</div>
                            <div><b>@Intensity.Light.GetSingleDisplayName()</b> - @Intensity.Light.GetSingleDisplayName(DisplayType.Description)</div>
                            <div><b>@Intensity.Medium.GetSingleDisplayName()</b> - @Intensity.Medium.GetSingleDisplayName(DisplayType.Description)</div>
                            <div><b>@Intensity.Heavy.GetSingleDisplayName()</b> - @Intensity.Heavy.GetSingleDisplayName(DisplayType.Description)</div>

                            <div class="mt-2">@Html.DisplayDescriptionFor(_ => Model.Intensity)</div>
                        </div>
                    </details>
                </div>
            }

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Exercises are chosen from equipment you have access to — no pullups without a pullup bar or fitness rings.
                </div>
            }
            <div class="form-group mb-3">
                <label asp-for="EquipmentBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Equipment)</label>
                <select asp-for="EquipmentBinder" class="form-control overflow-auto" aria-describedby="equipment-help" size="5"
                        asp-items="@(EnumExtensions.GetSingleValues<Equipment>().AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))">
                </select>
                <span asp-validation-for="EquipmentBinder" class="text-danger"></span>
                <details id="equipment-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.Equipment)</summary>

                    <div class="mt-1">
                        <span>Exercises that require equipment you don't have will be excluded from your workouts.</span>
                    </div>
                </details>
            </div>

            <div class="form-group mb-3">
                <label asp-for="SendDaysBinder" class="control-label">@Html.DisplayNameFor(_ => Model.SendDays)</label>
                <select asp-for="SendDaysBinder" class="form-control overflow-auto" aria-describedby="rest-help" size="@Days.All.PopCount()"
                        asp-items="@(EnumExtensions.GetSingleValues<Days>().AsSelectListItems())">
                </select>
                <span asp-validation-for="SendDaysBinder" class="text-danger"></span>
                <details id="rest-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.SendDays)</summary>

                    <div class="mt-1">
                        <span>If "@Html.DisplayNameFor(_ => Model.IncludeMobilityWorkouts)" is checked, you will receive new mobility workouts on unselected days.</span>
                    </div>
                </details>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Optional mobility workouts on rest days.
                </div>
            }
            <div class="form-group form-check mb-3">
                <label asp-for="IncludeMobilityWorkouts" class="control-label">@Html.DisplayNameFor(_ => Model.IncludeMobilityWorkouts)</label>
                <input class="form-check-input" asp-for="IncludeMobilityWorkouts" aria-describedby="off-day-help" />
                <span asp-validation-for="IncludeMobilityWorkouts" class="text-danger"></span>
                <div id="off-day-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.IncludeMobilityWorkouts)</div>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Optional sports, injury prevention, and rehabilitation exercises.
                </div>
            }
            <div class="form-group mb-3">
                <label asp-for="PrehabFocusBinder" class="control-label">@Html.DisplayNameFor(_ => Model.PrehabFocus)</label>
                <select asp-for="PrehabFocusBinder" class="form-control overflow-auto" aria-describedby="prehab-help" size="5"
                        asp-items='@(EnumExtensions.GetValuesExcluding(PrehabFocus.None, PrehabFocus.All).AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText, PrehabFocus.None))'>
                </select>
                <span asp-validation-for="PrehabFocusBinder" class="text-danger"></span>
                <details id="prehab-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.PrehabFocus)</summary>

                    <div class="mt-1">
                        <span>You will see one additional exercise for each prehab focus area selected.</span>
                    </div>
                </details>
            </div>
            @if (Model.PrehabFocus != PrehabFocus.None && Model.PrehabFocusBinder != null)
            {
                <div class="form-group mb-3">
                    <details class="mb-3" @(Model.WasUpdated == false ? "open='open'" : "")>
                        <summary><b>Edit @Html.DisplayNameFor(_ => Model.UserPrehabSkills)</b></summary>

                        <div class="mt-1 ps-3">
                            @for (var i = 0; i < Model.UserPrehabSkills.Count; i++)
                            {
                                <input type="hidden" asp-for="UserPrehabSkills[i].UserId" />
                                <input type="hidden" asp-for="UserPrehabSkills[i].PrehabFocus" />
                                <div class="mb-3">
                                    <label asp-for="UserPrehabSkills[i].PrehabSkillsBinder" class="control-label mb-1"><b>@Model.UserPrehabSkills[i].PrehabFocus.GetDisplayName2()</b></label>

                                    @if (Model.UserPrehabSkills[i].PrehabFocus.GetSkillType() == null)
                                    {
                                        <input type="hidden" asp-for="UserPrehabSkills[i].PrehabSkillsBinder" value="0" />
                                    } 
                                    else
                                    {
                                        <div class="mb-2">
                                            <label asp-for="UserPrehabSkills[i].PrehabSkillsBinder" class="control-label">@Html.DisplayNameFor(_ => Model.UserPrehabSkills[i].Skills)</label>
                                            <select asp-for="UserPrehabSkills[i].PrehabSkillsBinder" class="form-control" aria-describedby="skills-help" size="5"
                                                    asp-items='@(Model.UserPrehabSkills[i].PrehabFocus.GetSkillType()!.SelectList.AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))'>
                                            </select>
                                            <span asp-validation-for="UserPrehabSkills[i].Skills" class="text-danger"></span>
                                            <div id="skills-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserPrehabSkills[i].Skills)</div>
                                        </div>
                                    }
                                    <div class="mb-2" style="display:flex;column-gap:1ch;flex-wrap:wrap;">
                                        <div style="display:flex;margin-bottom:-.5ex;">@Html.DisplayNameFor(_ => Model.UserPrehabSkills[i].Count)</div>
                                        <div style="display:flex;gap:1ch;align-items:center;flex:1 0 150px;">
                                            <output name="prehabMusclesOutput@(i)" for="@Html.IdFor(_ => Model.UserPrehabSkills[i])">@Model.UserPrehabSkills[i].Count</output>
                                            <div style="display:flex;width:100%;">
                                                <input asp-for="UserPrehabSkills[i].Count" type="range" style="width:100%;" aria-describedby="count-help"
                                                       min="@UserConsts.PrehabCountMin" max="@UserConsts.PrehabCountMax" step="1"
                                                       oninput="prehabMusclesOutput@(i).value = this.valueAsNumber" />
                                            </div>
                                        </div>
                                        <span asp-validation-for="UserPrehabSkills[i]" class="text-danger"></span>
                                        <div id="count-help" class="form-text w-100">@Html.DisplayDescriptionFor(_ => Model.UserPrehabSkills[i].Count)</div>
                                    </div>
                                    <div class="mb-2 form-check">
                                        <label asp-for="UserPrehabSkills[i].AllRefreshed" class="control-label">@Html.DisplayNameFor(_ => Model.UserPrehabSkills[i].AllRefreshed)</label>
                                        <input class="form-check-input" asp-for="UserPrehabSkills[i].AllRefreshed" aria-describedby="refresh-help" />
                                        <span asp-validation-for="UserPrehabSkills[i].AllRefreshed" class="text-danger"></span>
                                        <div id="refresh-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.UserPrehabSkills[i].AllRefreshed)</div>
                                    </div>
                                </div>
                            }

                            <span asp-validation-for="UserPrehabSkills" class="text-danger"></span>
                        </div>
                    </details>
                </div>
            }

            <div class="form-group mb-3">
                <label asp-for="RehabFocus" class="control-label">@Html.DisplayNameFor(_ => Model.RehabFocus)</label>
                <select asp-for="RehabFocus" class="form-control" aria-describedby="rehab-help"
                        asp-items='@(EnumExtensions.GetSingleOrNoneValues<RehabFocus>().AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))'>
                </select>
                <span asp-validation-for="RehabFocus" class="text-danger"></span>
                <details id="rehab-help" class="form-text">
                    <summary>&#9888; @Html.DisplayDescriptionFor(_ => Model.RehabFocus)</summary>

                    <div class="mt-1">This will lower your progression level of every exercise that impacts the injured muscle, and will alter your workout to restore it's strength without straining it.</div>
                </details>
            </div>
            @if (Model.RehabFocus != RehabFocus.None && Model.RehabFocus.GetSkillType() != null)
            {
                <div class="form-group mb-3 ps-4">
                    <label asp-for="RehabSkillsBinder" class="control-label">@Html.DisplayNameFor(_ => Model.RehabSkills)</label>
                    <select asp-for="RehabSkillsBinder" class="form-control" aria-describedby="skills-help" size="5"
                            asp-items='@(Model.RehabFocus.GetSkillType()!.SelectList.AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))'>
                    </select>
                    <span asp-validation-for="RehabSkills" class="text-danger"></span>
                    <div id="skills-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.RehabSkills)</div>
                </div>
            }

            @if (Model.IsNewToFitness)
            {
                <input type="hidden" asp-for="SportsFocus" />
            }
            else
            {
                <div class="form-group mb-3">
                    <label asp-for="SportsFocus" class="control-label">@Html.DisplayNameFor(_ => Model.SportsFocus)</label>
                    <select asp-for="SportsFocus" class="form-control" aria-describedby="sports-help"
                            asp-items='@(EnumExtensions.GetValuesExcluding(SportsFocus.All).AsSelectListItems(EnumViewExtensions.EnumOrdering.Text, SportsFocus.None))'>
                    </select>
                    <span asp-validation-for="SportsFocus" class="text-danger"></span>
                    <details id="sports-help" class="form-text">
                        <summary>@Html.DisplayDescriptionFor(_ => Model.SportsFocus)</summary>

                        <div class="mt-1">Not recommended until you possess adequate core strength, balance, range of motion, and joint stability — minimum 2 years after starting strength training. For injury prevention exercises, see "@Html.DisplayNameFor(_ => Model.IncludeMobilityWorkouts)" &#8594; "@Html.DisplayNameFor(_ => Model.PrehabFocus)".</div>
                    </details>
                    <div id="sports-help" class="form-text"></div>
                </div>
                @if (Model.SportsFocus != SportsFocus.None && Model.SportsFocus.GetSkillType() != null)
                {
                    <div class="form-group mb-3 ps-4">
                        <label asp-for="SportsSkillsBinder" class="control-label">@Html.DisplayNameFor(_ => Model.SportsSkills)</label>
                        <select asp-for="SportsSkillsBinder" class="form-control" aria-describedby="skills-help" size="5"
                                asp-items='@(Model.SportsFocus.GetSkillType()!.SelectList.AsSelectListItems(EnumViewExtensions.EnumOrdering.GroupText))'>
                        </select>
                        <span asp-validation-for="SportsSkills" class="text-danger"></span>
                        <div id="skills-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.SportsSkills)</div>
                    </div>
                }
            }

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Customize how often you want to deload. Built-in deload weeks automatically adjust your workout to prevent overtraining.
                </div>
            }
            <div class="form-group mb-3">
                <label asp-for="DeloadAfterXWeeks" class="control-label">@Html.DisplayNameFor(_ => Model.DeloadAfterXWeeks)</label>
                <div style="display:flex;column-gap:1ex;">
                    <output name="deloadOutput" for="@Html.IdFor(_ => Model.DeloadAfterXWeeks)">@Model.DeloadAfterXWeeks</output>
                    <div style="display:flex;width:100%;">
                        <input asp-for="DeloadAfterXWeeks" type="range" style="width:100%;" aria-describedby="deload-help"
                               min="@Core.Consts.UserConsts.DeloadAfterXWeeksMin" max="@Core.Consts.UserConsts.DeloadAfterXWeeksMax"
                               oninput="deloadOutput.value = this.valueAsNumber" />
                    </div>
                </div>
                <span asp-validation-for="DeloadAfterXWeeks" class="text-danger"></span>
                <details id="deload-help" class="form-text">
                    <summary>@Html.DisplayDescriptionFor(_ => Model.DeloadAfterXWeeks)</summary>

                    <div class="mt-1">
                        <span>Deload weeks are crucial for mitigating fatigue injuries, allowing joints to recover from repeated stress, and preventing muscle growth stagnation. Heavy lifters should deload more often than others.</span>
                    </div>
                </details>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout callout">
                    Customize muscles worked in the warmup and cooldown sections.
                </div>
            }
            <div class="form-group mb-3">
                <details class="mb-3" @(Model.WasUpdated == false ? "open='open'" : "")>
                    <summary><b>Edit @Html.DisplayNameFor(_ => Model.UserMuscleMobilities)</b></summary>

                    <div class="mt-1 ps-3">
                        @for (var i = 0; i < Model.UserMuscleMobilities.Count; i++)
                        {
                            <input type="hidden" asp-for="UserMuscleMobilities[i].UserId" />
                            <input type="hidden" asp-for="UserMuscleMobilities[i].MuscleGroup" />
                            <div class="mb-1" style="display:flex;column-gap:1ch;flex-wrap:wrap;">
                                <div style="display:flex;flex:1 0 14ch;margin-bottom:-.5ex;">@Model.UserMuscleMobilities[i].MuscleGroup.GetDisplayName2()</div>
                                <div style="display:flex;flex:99999 0 150px;gap:1ch;align-items:center;">
                                    <output name="mobilityMusclesOutput@(i)" for="@Html.IdFor(_ => Model.UserMuscleMobilities[i])">@Model.UserMuscleMobilities[i].Count</output>
                                    <div style="display:flex;width:100%;">
                                        <input asp-for="UserMuscleMobilities[i].Count" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                                               min="@UserConsts.UserMuscleMobilityMin" max="@UserConsts.UserMuscleMobilityMax"
                                               oninput="mobilityMusclesOutput@(i).value = this.valueAsNumber" list="mobilityMusclesList@(i)" />
                                        <datalist id="mobilityMusclesList@(i)">
                                            <option value="@(UserMuscleMobility.MuscleTargets.TryGetValue(Model.UserMuscleMobilities[i].MuscleGroup, out int countTmp) ? countTmp : 0)"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <span asp-validation-for="UserMuscleMobilities[i]" class="text-danger"></span>
                                <div id="refresh-functional-help" class="form-text">
                                    <p>@Html.DisplayDescriptionFor(_ => Model.UserMuscleMobilities[i])</p>
                                </div>
                            </div>
                        }

                        <span asp-validation-for="UserMuscleMobilities" class="text-danger"></span>
                        <div id="mobility-muscles-help" class="form-text">
                            @Html.DisplayDescriptionFor(_ => Model.UserMuscleMobilities)
                        </div>
                    </div>
                </details>
            </div>

            <div class="form-group mb-3">
                <details class="mb-3" @(Model.WasUpdated == false ? "open='open'" : "")>
                    <summary><b>Edit @Html.DisplayNameFor(_ => Model.UserMuscleFlexibilities)</b></summary>

                    <div class="mt-1 ps-3">
                        @for (var i = 0; i < Model.UserMuscleFlexibilities.Count; i++)
                        {
                            <input type="hidden" asp-for="UserMuscleFlexibilities[i].UserId" />
                            <input type="hidden" asp-for="UserMuscleFlexibilities[i].MuscleGroup" />
                            <div class="mb-1" style="display:flex;column-gap:1ch;flex-wrap:wrap;">
                                <div style="display:flex;flex:1 0 14ch;margin-bottom:-.5ex;">@Model.UserMuscleFlexibilities[i].MuscleGroup.GetDisplayName2()</div>
                                <div style="display:flex;flex:99999 0 150px;gap:1ch;align-items:center;">
                                    <output name="flexibilityMusclesOutput@(i)" for="@Html.IdFor(_ => Model.UserMuscleFlexibilities[i])">@Model.UserMuscleFlexibilities[i].Count</output>
                                    <div style="display:flex;width:100%;">
                                        <input asp-for="UserMuscleFlexibilities[i].Count" type="range" style="width:100%;" aria-describedby="refresh-functional-help"
                                               min="@UserConsts.UserMuscleFlexibilityMin" max="@UserConsts.UserMuscleFlexibilityMax"
                                               oninput="flexibilityMusclesOutput@(i).value = this.valueAsNumber" list="flexibilityMusclesList@(i)" />
                                        <datalist id="flexibilityMusclesList@(i)">
                                            <option value="@(UserMuscleFlexibility.MuscleTargets.TryGetValue(Model.UserMuscleFlexibilities[i].MuscleGroup, out int countTmp) ? countTmp : 0)"></option>
                                        </datalist>
                                    </div>
                                </div>
                                <span asp-validation-for="UserMuscleFlexibilities[i]" class="text-danger"></span>
                                <div id="refresh-functional-help" class="form-text">
                                    <p>@Html.DisplayDescriptionFor(_ => Model.UserMuscleFlexibilities[i])</p>
                                </div>
                            </div>
                        }

                        <span asp-validation-for="UserMuscleFlexibilities" class="text-danger"></span>
                        <div id="mobility-muscles-help" class="form-text">
                            @Html.DisplayDescriptionFor(_ => Model.UserMuscleFlexibilities)
                        </div>
                    </div>
                </details>
            </div>

            @if (Model.User.IsDemoUser)
            {
                <div class="alert alert-info callout">
                    Optional health and fitness tips.
                </div>
            }

            <div class="form-group mb-3">
                <label asp-for="FootnoteTypeBinder" class="control-label">@Html.DisplayNameFor(_ => Model.FootnoteType)</label>
                <select asp-for="FootnoteTypeBinder" class="form-control overflow-auto" aria-describedby="footnote-help" size="5"
                        asp-items='@(EnumExtensions.GetSingleValues<FootnoteType>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))'>
                </select>
                <span asp-validation-for="FootnoteTypeBinder" class="text-danger"></span>
                <div id="footnote-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.FootnoteType)</div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="VerbosityBinder" class="control-label">@Html.DisplayNameFor(_ => Model.Verbosity)</label>
                <select asp-for="VerbosityBinder" class="form-control overflow-auto" aria-describedby="verbosity-help" size="5"
                        asp-items="@(EnumExtensions.GetDisplayValues<Verbosity>().AsSelectListItems(EnumViewExtensions.EnumOrdering.Text))">
                </select>
                <span asp-validation-for="VerbosityBinder" class="text-danger"></span>
                <div id="verbosity-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.Verbosity)</div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="ImageType" class="control-label">@Html.DisplayNameFor(_ => Model.ImageType)</label>
                <select asp-for="ImageType" class="form-control" aria-describedby="image-help"
                        asp-items="@Enum.GetValues<ImageType>().AsSelectListItems()">
                </select>
                <span asp-validation-for="ImageType" class="text-danger"></span>
                <div id="image-help" class="form-text">@Html.DisplayDescriptionFor(_ => Model.ImageType)</div>
            </div>

            <div class="form-group mb-3 row">
                <div class="col">
                    <label asp-for="SendHour" class="control-label">@Html.DisplayNameFor(_ => Model.SendHour)</label>
                    <select asp-for="SendHour" class="form-control" aria-describedby="time-help"
                    asp-items="@(Enumerable.Range(0, 24).Select(h => new SelectListItem() { Text = $"{h}", Value = $"{h}" }))">
                    </select>
                    <span asp-validation-for="SendHour" class="text-danger"></span>
                    <details id="time-help" class="form-text">
                        <summary>@Html.DisplayDescriptionFor(_ => Model.SendHour)</summary>

                        <div class="mt-1">
                            <span>Your time zone is <span id="utc-offset"></span> hours <span id="behind-ahead"></span> UTC.</span>
                        </div>
                        <script defer="defer">
                            const utcOffset = new Date().getTimezoneOffset() / -60;
                            document.getElementById('utc-offset').innerText = Math.abs(utcOffset);
                            document.getElementById('behind-ahead').innerText = utcOffset < 0 ? "behind" : "ahead of";
                        </script>
                    </details>
                </div>
                @if (Model.IncludeMobilityWorkouts)
                {
                    <div class="col">
                        <label asp-for="SecondSendHour" class="control-label">@Html.DisplayNameFor(_ => Model.SecondSendHour)</label>
                        <select asp-for="SecondSendHour" class="form-control" aria-describedby="time-help"
                                asp-items='@(Enumerable.Range(0, 24).Select(h => new SelectListItem() { Text = $"{h}", Value = $"{h}" })).Prepend(new SelectListItem() { Text = "None", Value = "" })'>
                        </select>
                        <span asp-validation-for="SecondSendHour" class="text-danger"></span>
                        <details id="time-help" class="form-text">
                            <summary>@Html.DisplayDescriptionFor(_ => Model.SecondSendHour)</summary>

                            <div class="mt-1">
                                <span>Your time zone is <span id="utc-offset2"></span> hours <span id="behind-ahead2"></span> UTC.</span>
                            </div>
                            <script defer="defer">
                                const utcOffset = new Date().getTimezoneOffset() / -60;
                                document.getElementById('utc-offset2').innerText = Math.abs(utcOffset);
                                document.getElementById('behind-ahead2').innerText = utcOffset < 0 ? "behind" : "ahead of";
                            </script>
                        </details>
                    </div>
                } 
                else
                {
                    <input type="hidden" asp-for="SecondSendHour" value="" />
                }
            </div>

            <div class="form-group form-check mb-3">
                <label asp-for="NewsletterEnabled" class="control-label">@Html.DisplayNameFor(_ => Model.NewsletterEnabled)</label>
                <input class="form-check-input" asp-for="NewsletterEnabled" aria-describedby="disabled-help" />
                <span asp-validation-for="NewsletterEnabled" class="text-danger"></span>
                <div id="disabled-help" class="form-text">
                    @Html.DisplayDescriptionFor(_ => Model.NewsletterEnabled)
                    @if (!String.IsNullOrWhiteSpace(Model.NewsletterDisabledReason))
                    {
                        <div><b>Disabled Reason</b> - @Model.NewsletterDisabledReason</div>
                    }
                </div>
            </div>

            <div class="row form-group">
                <div class="col">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
                <div class="col-auto">
                    <a class="btn btn-link text-muted hover" href="@Url.ActionLink(nameof(UserController.Delete), UserController.Name, new { Model.Email, Model.Token })">Delete Account</a>
                </div>
            </div>
        </form>

        @await Component.InvokeAsync(AdvancedViewComponent.Name, new { Model.User, Model.Token })
    </div>

    <div id="info" class="col">
        @await Component.InvokeAsync(ConfirmationViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(EquipmentViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(UnsupportedClientViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(RehabViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(WorkoutViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(NextWorkoutViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(PastWorkoutsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(WorkoutSplitViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(MuscleTargetsViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(DeloadViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(WorkoutsPerWeekViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(TokenViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(FootnoteViewComponent.Name, new { Model.User, Model.Token })
        @await Component.InvokeAsync(IgnoredExerciseVariationsViewComponent.Name, new { Model.User, Model.Token })
    </div>
</div>