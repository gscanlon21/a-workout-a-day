@model ManageExerciseVariationViewModel
@using System.Numerics
@using Core.Models.Exercise
@using Core.Consts
@using Web.Components.UserVariation
@using Web.Components.UserExercise

@{
    ViewData[ViewData_Blank.Title] = "Variation";
}

<div class="row gy-2 mb-2 mt-1 justify-content-between align-items-end">
    <div class="col-auto mb-3">
        <h1 class="primary-heading">Variation</h1>
        <h2 class="sub-heading ps-1">@Model.Parameters.Section.GetSingleDisplayName(DisplayType.ShortName)</h2>
    </div>
    <partial name="_ValidationMessagePartial" model='new ValidationMessagePartialModel() { WasUpdated = Model.WasUpdated, GoBackOnSave = true }' />
</div>

@if (Model.HasVariation)
{
    <div class="row gy-4">
        <div class="col-lg-6">
            @await Component.InvokeAsync(ManageVariationViewComponent.Name, new { Model.User, Model.Parameters })
        </div>

        <div class="col-lg-6">
            @await Component.InvokeAsync(ManageExerciseViewComponent.Name, new { Model.User, Model.Parameters })

            @await Component.InvokeAsync(PrerequisiteViewComponent.Name, new { Model.User, Model.Parameters })
            @await Component.InvokeAsync(PostrequisiteViewComponent.Name, new { Model.User, Model.Parameters })
        </div>
    </div>
} 
else
{
    <div class="row">
        <div class="col-lg-6">
            @await Component.InvokeAsync(ManageExerciseViewComponent.Name, new { Model.User, Model.Parameters })
        </div>

        <div class="col">
            @await Component.InvokeAsync(PrerequisiteViewComponent.Name, new { Model.User, Model.Parameters })
            @await Component.InvokeAsync(PostrequisiteViewComponent.Name, new { Model.User, Model.Parameters })
        </div>
    </div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" model='new ValidationScriptsPartialViewModel() { IsDemoUser = Model.User.IsDemoUser }' />
}
